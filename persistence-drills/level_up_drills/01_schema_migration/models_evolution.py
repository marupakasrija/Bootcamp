# level_up_drills/01_schema_migration/models_evolution.py

# This file illustrates the evolution of the User model for schema migration.
# It does NOT contain active SQLAlchemy models intended for mapping with
# your application's Base.metadata, to avoid conflicts with shared.py.

# We still need SQLAlchemy types for defining the conceptual columns
from sqlalchemy import Column, Integer, String, DateTime, func, Table, MetaData

# --- Illustrative Model Structures (Defined using SQLAlchemy Core Table) ---
# These are NOT mapped to your application's 'Base'.
# They are just used within this script to show structure.

# Use separate MetaData instances just for this illustration
metadata_v1_illustration = MetaData()
metadata_v2_illustration = MetaData()

# Conceptual "Before" structure (User table without created_at)
user_table_v1_illustration = Table(
    "users", # Table name
    metadata_v1_illustration, # Associate with a separate MetaData
    Column('id', Integer, primary_key=True, index=True),
    Column('name', String, index=True),
    Column('email', String, unique=True, index=True)
    # No created_at
)

# Conceptual "After" structure (User table with created_at)
user_table_v2_illustration = Table(
    "users", # Table name
    metadata_v2_illustration, # Associate with another separate MetaData
    Column('id', Integer, primary_key=True, index=True),
    Column('name', String, index=True),
    Column('email', String, unique=True, index=True),
    # --- Add the new column ---
    Column('created_at', DateTime, server_default=func.now(), nullable=False)
)

# --- Conceptual Alembic Migration Script (Generated by Alembic) ---
# You would NOT write this file manually usually; Alembic generates it
# based on comparing your actual model definition in shared.py
# with the current database schema.
# This commented block shows what the generated SQL might look like.

"""
# Example Alembic Migration Script (Conceptual)

# Revision ID: <a unique ID generated by Alembic>
# Revises: <the ID of the previous migration>
# Create Date: YYYY-MM-DD HH:MM:SS

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import func # Needed for server_default in migration script

def upgrade():
    # Add the new column 'created_at' to the 'users' table
    op.add_column('users', sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=True))
    # Note: Often added as nullable=True first.
    # If making it NOT NULL later, add a second migration to:
    # 1. Populate existing rows: op.execute('UPDATE users SET created_at = NOW()') # Use DB-specific function
    # 2. Alter column to NOT NULL: op.alter_column('users', 'created_at', nullable=False)


def downgrade():
    # Remove the 'created_at' column
    op.drop_column('users', 'created_at')
"""

# --- How to apply the migration (Conceptual Steps using Alembic commands) ---
# 1. Modify your actual User model in shared.py to include the 'created_at' column
#    (e.g., add `created_at = Column(DateTime, server_default=func.now(), nullable=False)` to the User class in shared.py).
# 2. Ensure Alembic is installed (pip install alembic).
# 3. Initialize Alembic in your project root (where shared.py is): `alembic init alembic`
# 4. Configure alembic/env.py to load your Base and target_metadata (refer Alembic docs).
# 5. Generate the migration script: `alembic revision -m "add created_at to users"`
# 6. REVIEW THE GENERATED SCRIPT (very important!) - edit if needed for defaults, nullability, etc.
# 7. Apply the migration to the database: `alembic upgrade head`
# 8. To roll back (if needed): `alembic downgrade -1` # Goes back one revision

# --- How to apply safely in production ---
# (See comments in the conceptual Alembic script and previous response for details on zero-downtime strategies).
# Key points: Use a tool, test migrations, apply migrations *before* code, have rollback plans, use multi-step for NOT NULL.


if __name__ == "__main__":
    print("This script primarily shows the model definition changes for schema migration.")
    print("It uses conceptual Table objects for illustration, not active SQLAlchemy models.")
    print("The actual User model used by your application should live ONLY in shared.py.")
    print("Schema migration is managed using a tool like Alembic.")
    print("Refer to the comments and the conceptual steps to understand the process.")

    print("\n--- Illustrative Model Structure (Before - users table) ---")
    print(f"Table Name: {user_table_v1_illustration.name}")
    print("Columns:")
    for col in user_table_v1_illustration.columns:
         # Cannot print server_default directly this way from core Column
         print(f"- {col.name}: {col.type} (Nullable: {col.nullable}, Unique: {col.unique})")


    print("\n--- Illustrative Model Structure (After - users table) ---")
    print(f"Table Name: {user_table_v2_illustration.name}")
    print("Columns:")
    for col in user_table_v2_illustration.columns:
         print(f"- {col.name}: {col.type} (Nullable: {col.nullable}, Unique: {col.unique})")
         # Can check server_default property
         if col.server_default:
              print(f"  Server Default: {col.server_default.arg}")