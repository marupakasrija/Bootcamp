# This is abstraction-level-7/state_config.yaml
# Defines the State Transition System mapping tags (states) to processors.

# 'states' defines the available states and the processor associated with each state.
# Keys are the tag/state names. Values are dictionaries defining the processor.
states:
  # The entry point state. Lines start here.
  start:
    type: states.start.InitialTagger
    config:
      next_tag: content_router # After 'start', send lines to 'content_router'

  # Routes lines based on content (ERROR, WARN, or default)
  content_router:
    type: states.taggers.ContentRouter
    config:
      default_tag: general_process # Default path
      rules:
        - tag: error_process # If line contains "ERROR", send to 'error_process' state
          contains: "ERROR"
        - tag: warn_process # If line contains "WARN", send to 'warn_process' state
          contains: "WARN"

  # Handles lines tagged 'error_process'
  error_process:
    type: states.filters.ErrorOnlyFilter # Example: Ensure it's an error, then send somewhere
    config:
      next_tag: final_output # After error processing, send to 'final_output' state

  # Handles lines tagged 'warn_process'
  warn_process:
    type: states.formatters.UppercaseFormatter # Example: Uppercase warnings
    config:
      next_tag: general_process # After warning processing, send to 'general_process' state (Fan-in)

  # Handles lines tagged 'general_process' (Fan-in from 'start' default and 'warn_process')
  general_process:
    type: states.formatters.SnakecaseFormatter # Example: Snakecase everything else
    config:
      next_tag: final_output # After general processing, send to 'final_output' state

  # The exit point state. Lines reaching here are collected as final output.
  final_output:
    type: states.end.OutputCollector

  # Example of a potential loop (uncomment to test cycle detection/guard)
  # loop_state:
  #   type: states.taggers.ContentRouter # Or any processor that emits tags
  #   config:
  #     default_tag: loop_state # Route back to itself
  #     rules:
  #       - tag: end # Add a condition to eventually exit the loop
  #         contains: "EXIT LOOP"

